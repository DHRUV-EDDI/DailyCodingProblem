DAILY CODING PROBLEM - #49
--------------------------
This problem was asked by Google.

Implement an LRU (Least Recently Used) cache. It should be able to be initialized with a cache size n, 
and contain the following methods:

    => set(key, value): sets key to value. If there are already n items in the cache and we are adding a new item, 
       then it should also remove the least recently used item.
    => get(key): gets the value at key. If no such key exists, return null.

Each operation should run in O(1) time.

Sample Input:                                                               Sample Output:
2 9                                                                         1
SET 1 1                                                                     -1
SET 2 2                                                                     -1
GET 1                                                                       3
SET 3 3                                                                     4
GET 2
SET 4 4
GET 1
GET 3
GET 4
