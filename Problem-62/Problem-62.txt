DAILY CODING PROBLEM - #62
--------------------------
This problem was asked by Google.

Implement an LFU (Least Frequently Used) cache. It should be able to be initialized with a cache size n, 
and contain the following methods:

=> set(key, value): sets key to value. If there are already n items in the cache and we are adding a new item, 
                 then it should also remove the least frequently used item. If there is a tie, then the least 
                 recently used key should be removed.
=> get(key): gets the value at key. If no such key exists, return null.

Restriction:
Each operation should run in O(1) time.

Sample Input:                                                               Sample Output:
2 10                                                                        1
SET 1 1                                                                     -1
SET 2 2                                                                     3
GET 1                                                                       -1 
PUT 3 3                                                                     3
GET 2                                                                       4
GET 3 
SET 4 4
GET 1
GET 3
GET 4